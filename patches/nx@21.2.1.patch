diff --git a/src/plugins/js/index.js b/src/plugins/js/index.js
index 343e728d6f5f3a6973a291b5374ced11ac112f00..c70529ee9e5b96d5270053c22419728564c97268 100644
--- a/src/plugins/js/index.js
+++ b/src/plugins/js/index.js
@@ -37,7 +37,7 @@ exports.createNodes = [
             return {};
         }
         const lockFilePath = (0, path_1.join)(workspace_root_1.workspaceRoot, lockFile);
-        const lockFileContents = packageManager !== 'bun'
+        const lockFileContents = packageManager !== 'bun' || lockFile.endsWith('.lock')
             ? (0, fs_1.readFileSync)(lockFilePath).toString()
             : (0, child_process_1.execSync)(`bun ${lockFilePath}`, {
                 maxBuffer: 1024 * 1024 * 10,
@@ -66,8 +66,9 @@ const createDependencies = (_, ctx) => {
     if (pluginConfig.analyzeLockfile &&
         (0, lock_file_1.lockFileExists)(packageManager) &&
         parsedLockFile.externalNodes) {
-        const lockFilePath = (0, path_1.join)(workspace_root_1.workspaceRoot, (0, lock_file_1.getLockFileName)(packageManager));
-        const lockFileContents = packageManager !== 'bun'
+        const lockFileName = (0, lock_file_1.getLockFileName)(packageManager);
+        const lockFilePath = (0, path_1.join)(workspace_root_1.workspaceRoot, lockFileName);
+        const lockFileContents = packageManager !== 'bun' || lockFileName.endsWith('.lock')
             ? (0, fs_1.readFileSync)(lockFilePath).toString()
             : (0, child_process_1.execSync)(`bun ${lockFilePath}`, {
                 maxBuffer: 1024 * 1024 * 10,
diff --git a/bun-parser.js b/bun-parser.js
new file mode 100644
index 0000000000000000000000000000000000000000..08941eaf08d316a03954846eafd03298e7ea85e0
--- /dev/null
+++ b/bun-parser.js
@@ -0,0 +1,78 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getBunLockfileNodes = getBunLockfileNodes;
+exports.getBunLockfileDependencies = getBunLockfileDependencies;
+exports.stringifyBunLockfile = stringifyBunLockfile;
+const file_hasher_1 = require("./src/hasher/file-hasher");
+/**
+ * Parses Bun's lock file format (bun.lock)
+ *
+ * Bun lock files are JSON with the following structure:
+ * {
+ *   "lockfileVersion": 1,
+ *   "workspaces": { ... },
+ *   "packages": {
+ *     "package-name": ["package@version", "", { metadata }, "sha512-..."]
+ *   }
+ * }
+ */
+function getBunLockfileNodes(lockFileContent, lockFileHash) {
+    const nodes = {};
+    try {
+        // Bun uses relaxed JSON with trailing commas, so we need to remove them
+        const cleanedContent = lockFileContent.replace(/,(\s*[}\]])/g, '$1');
+        const parsed = JSON.parse(cleanedContent);
+        if (!parsed.packages) {
+            return nodes;
+        }
+        Object.entries(parsed.packages).forEach(([key, value]) => {
+            if (!Array.isArray(value) || value.length < 4)
+                return;
+            const [fullIdentifier, , metadata, hash] = value;
+            // Extract name and version from "package@version"
+            // Handle scoped packages correctly
+            const atIndex = fullIdentifier.lastIndexOf('@');
+            if (atIndex <= 0)
+                return;
+            const packageName = fullIdentifier.substring(0, atIndex);
+            const version = fullIdentifier.substring(atIndex + 1);
+            // Skip workspace packages (they start with the workspace name)
+            if (parsed.workspaces &&
+                Object.keys(parsed.workspaces).some((ws) => ws !== '' && fullIdentifier.startsWith(ws + '@'))) {
+                return;
+            }
+            const nodeName = `npm:${packageName}`;
+            nodes[nodeName] = {
+                type: 'npm',
+                name: nodeName,
+                data: {
+                    version,
+                    packageName,
+                    hash: hash || (0, file_hasher_1.hashArray)([packageName, version]),
+                },
+            };
+        });
+    }
+    catch (e) {
+        // If parsing fails, return empty nodes rather than crashing
+        console.warn('Failed to parse bun.lock file:', e);
+    }
+    return nodes;
+}
+/**
+ * Bun doesn't have a separate dependency graph in the lockfile
+ * Dependencies are already resolved in the packages section
+ */
+function getBunLockfileDependencies(lockFileContent, lockFileHash) {
+    // Bun lock files don't need separate dependency resolution
+    // All dependencies are already flattened in the packages section
+    return [];
+}
+/**
+ * Bun doesn't support lockfile pruning/stringification yet
+ */
+function stringifyBunLockfile(graph, lockFileContent, packageJson) {
+    // Bun doesn't support lockfile generation yet
+    // Return the original content
+    return lockFileContent;
+}
\ No newline at end of file
diff --git a/src/plugins/js/lock-file/lock-file.js b/src/plugins/js/lock-file/lock-file.js
index 3a4dd9f7f20910cd24692d8a6be81ee9abe0fa42..cd78c5162fe2ba77fa4f4f682648f58511ffcfa3 100644
--- a/src/plugins/js/lock-file/lock-file.js
+++ b/src/plugins/js/lock-file/lock-file.js
@@ -20,6 +20,7 @@ const output_1 = require("../../../utils/output");
 const npm_parser_1 = require("./npm-parser");
 const pnpm_parser_1 = require("./pnpm-parser");
 const yarn_parser_1 = require("./yarn-parser");
+const bun_parser_1 = require("../../../../bun-parser");
 const project_graph_pruning_1 = require("./project-graph-pruning");
 const package_json_1 = require("./utils/package-json");
 const fileutils_1 = require("../../../utils/fileutils");
@@ -56,9 +57,8 @@ function getLockFileNodes(packageManager, contents, lockFileHash, context) {
             return (0, npm_parser_1.getNpmLockfileNodes)(contents, lockFileHash);
         }
         if (packageManager === 'bun') {
-            // bun uses yarn v1 for the file format
-            const packageJson = (0, fileutils_1.readJsonFile)('package.json');
-            return (0, yarn_parser_1.getYarnLockfileNodes)(contents, lockFileHash, packageJson);
+            // Use our Bun-specific parser for bun.lock files
+            return (0, bun_parser_1.getBunLockfileNodes)(contents, lockFileHash);
         }
     }
     catch (e) {
@@ -87,8 +87,8 @@ function getLockFileDependencies(packageManager, contents, lockFileHash, context
             return (0, npm_parser_1.getNpmLockfileDependencies)(contents, lockFileHash, context);
         }
         if (packageManager === 'bun') {
-            // bun uses yarn v1 for the file format
-            return (0, yarn_parser_1.getYarnLockfileDependencies)(contents, lockFileHash, context);
+            // Use our Bun-specific parser for bun.lock files
+            return (0, bun_parser_1.getBunLockfileDependencies)(contents, lockFileHash);
         }
     }
     catch (e) {
@@ -133,6 +133,10 @@ function getLockFileName(packageManager) {
         return NPM_LOCK_FILE;
     }
     if (packageManager === 'bun') {
+        // Check which lockfile exists (Bun supports both formats)
+        if ((0, node_fs_1.existsSync)((0, node_path_1.join)(workspace_root_1.workspaceRoot, BUN_TEXT_LOCK_FILE))) {
+            return BUN_TEXT_LOCK_FILE;
+        }
         return BUN_LOCK_FILE;
     }
     throw new Error(`Unknown package manager: ${packageManager}`);
@@ -148,17 +152,11 @@ function getLockFilePath(packageManager) {
         return NPM_LOCK_PATH;
     }
     if (packageManager === 'bun') {
-        try {
-            const bunVersion = (0, node_child_process_1.execSync)('bun --version').toString().trim();
-            // In version 1.2.0, bun switched to a text based lockfile format by default
-            if ((0, semver_1.gte)(bunVersion, '1.2.0')) {
-                return BUN_TEXT_LOCK_FILE;
-            }
-            return BUN_LOCK_PATH;
-        }
-        catch {
-            return BUN_LOCK_PATH;
+        // Check which lockfile exists (Bun supports both formats)
+        if ((0, node_fs_1.existsSync)(BUN_TEXT_LOCK_PATH)) {
+            return BUN_TEXT_LOCK_PATH;
         }
+        return BUN_LOCK_PATH;
     }
     throw new Error(`Unknown package manager: ${packageManager}`);
 }
